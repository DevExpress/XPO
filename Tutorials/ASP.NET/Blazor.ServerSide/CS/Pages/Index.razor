@page "/"
@using BlazorServerSideApplication
@using BlazorServerSideApplication.Services

@inject CustomerService CustomerService
@inject OrderService OrderService

<h1>Customers</h1>

@if(customers == null) {
    <p><em>Loading...</em></p>
} else {

    <DxDataGrid Data=@customers KeyFieldName="Oid"
                AllowDataRowSelection=false PageSize="10" ShowFilterRow=true
                RowRemoving=@( (dataItem) => this.OnRowRemoving(dataItem) )
                RowUpdating=@( (updatingDataItem, values) => OnRowUpdating(updatingDataItem, values) )
                RowInserting=@( (values) => OnRowInserting(values, typeof(Customer)) )>

        <DxDataGridCommandColumn Width="100px"></DxDataGridCommandColumn>
        <DxDataGridColumn Width="100px" Field=@nameof(Customer.Oid) Visible="true" EditorVisible="false"></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(Customer.FirstName)></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(Customer.LastName)></DxDataGridColumn>
        <DxDataGridCommandColumn Width="50px">
            <CellTemplate>
                <button class="btn btn-link dxbs-button" @onclick="@( ()=>OnClickCustomerOrders((Customer)context) )" data-toggle="modal" data-target="#exampleModal">Orders</button>
            </CellTemplate>
            <HeaderCellTemplate></HeaderCellTemplate>
            <HeaderFilterCellTemplate></HeaderFilterCellTemplate>
        </DxDataGridCommandColumn>
    </DxDataGrid>

    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width:1000px">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit Orders</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if(selectedCustomerOrders != null && SelectedCustomer != null) {
                        <DxDataGrid Data=@selectedCustomerOrders KeyFieldName="Oid"
                                    AllowDataRowSelection=false PageSize=5 ShowFilterRow=false
                                    RowRemoving=@( (dataItem) => this.OnRowRemoving(dataItem) )
                                    RowUpdating=@( (updatingDataItem, values) => OnRowUpdating(updatingDataItem, values))
                                    RowInserting=@( (values) => OnRowInserting(values, typeof(Order)))>
                            <DxDataGridCommandColumn Width="100px"></DxDataGridCommandColumn>
                            <DxDataGridColumn Field="@nameof(Order.Oid)" Visible="true" EditorVisible="false">
                            </DxDataGridColumn>
                            <DxDataGridDateEditColumn Field=@nameof(Order.OrderDate)></DxDataGridDateEditColumn>
                            <DxDataGridColumn Field=@nameof(Order.ProductName)></DxDataGridColumn>
                            <DxDataGridSpinEditColumn Field=@nameof(Order.Freight)></DxDataGridSpinEditColumn>
                            <DxDataGridComboBoxColumn Field=@(nameof(Customer)+"!")
                                                      Data=@customers TextFieldName="ContactName"
                                                      Caption=@nameof(Customer)>
                            </DxDataGridComboBoxColumn>
                        </DxDataGrid>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private IQueryable<Customer> customers;
    private IQueryable<Order> selectedCustomerOrders;

    private Customer SelectedCustomer { get; set; }

    protected override async Task OnInitializedAsync() {
        customers = await CustomerService.Get();
    }
    async void OnRowInserting(Dictionary<string, object> values, Type type) {
        if(type == typeof(Customer)) {

            await CustomerService.Add(values);
        } else if(type == typeof(Order)) {
            await OrderService.Add(values, SelectedCustomer.Oid);
        }
        StateHasChanged();
    }
    async void OnRowUpdating(object item, Dictionary<string, object> values) {
        Customer customer = item as Customer;
        if(customer != null) {
            await CustomerService.Update(customer.Oid, values);
        } else {
            Order order = item as Order;
            if(order != null) {
                await OrderService.Update(order.Oid, values);
            }
        }
        StateHasChanged();
    }
    async void OnRowRemoving(object item) {
        Customer customer = item as Customer;
        if(customer != null) {
            await CustomerService.Delete(customer.Oid);
        } else {
            Order order = item as Order;
            if(order != null) {
                await OrderService.Delete(order.Oid);
            }
        }
        StateHasChanged();
    }
    async void OnClickCustomerOrders(Customer item) {
        SelectedCustomer = item;
        selectedCustomerOrders = await OrderService.GetCustomerOrders(item.Oid);
        StateHasChanged();
    }
    void OnSelectedItemChanged(Customer customerReference, CellEditContext context) {
        context.OnChanged(customerReference != null ? (object)customerReference.Oid : null);
    }
}