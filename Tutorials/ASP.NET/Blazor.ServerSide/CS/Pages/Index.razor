@page "/"
@using BlazorServerSideApplication
@using BlazorServerSideApplication.Services
@using DevExpress.Xpo;
@inject CustomerService CustomerService
@inject OrderService OrderService

<h1>Customers</h1>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <DxGrid @ref="customerGrid" Data="@customers"
            KeyFieldName="Oid"
            PageSize="10"
            ShowFilterRow="true"
            CustomizeEditModel="Grid_CustomizeEditModel_Customer"
            EditMode="GridEditMode.EditRow"
            EditModelSaving="Grid_EditModelSaving_Customer" DataItemDeleting="Grid_DataItemDeleting_Customer">
        <Columns>
            <DxGridCommandColumn Width="100px"></DxGridCommandColumn>
            <DxGridDataColumn Width="100px"
                              FieldName="@nameof(Customer.Oid)"
                              Visible="true" DataRowEditorVisible="false">
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(Customer.FirstName)"></DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(Customer.LastName)"></DxGridDataColumn>

            <DxGridCommandColumn Width="100px">
                <CellDisplayTemplate>
                    <button class="btn btn-link dxbs-button"
                            onclick="@(() => LoadOrdersAsync((Customer)context.DataItem))"
                            data-toggle="modal"
                            data-target="#exampleModal">
                        Orders
                    </button>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
        </Columns>
    </DxGrid>

    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width:1000px">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit Orders</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (selectedCustomerOrders != null && SelectedCustomer != null)
                    {
                        <DxGrid @ref="orderGrid" Data=selectedCustomerOrders
                                KeyFieldName="Oid"
                                PageSize="5"
                                ShowFilterRow="false"
                                CustomizeEditModel="Grid_CustomizeEditModel_Order"
                                EditMode="GridEditMode.EditRow"
                                EditModelSaving="Grid_EditModelSaving_Order" DataItemDeleting="Grid_DataItemDeleting_Order">
                            <Columns>
                                <DxGridCommandColumn Width="100px"></DxGridCommandColumn>

                                <DxGridDataColumn FieldName="@nameof(Order.Oid)"
                                                  Visible="true"
                                                  DataRowEditorVisible="false">
                                </DxGridDataColumn>

                                <DxGridDataColumn FieldName="@nameof(Order.OrderDate)"
                                                  DisplayFormat="d">
                                </DxGridDataColumn>

                                <DxGridDataColumn FieldName="@nameof(Order.ProductName)">
                                </DxGridDataColumn>

                                <DxGridDataColumn FieldName="@nameof(Order.Freight)"
                                                  DisplayFormat="n2">
                                </DxGridDataColumn>

                                <DxGridDataColumn FieldName="@nameof(Order.CustomerId)"
                                                  Caption="Customer" >
                                    <EditSettings>
                                        <DxComboBoxSettings Data="@customers"
                                                            TextFieldName="ContactName"
                                                            ValueFieldName="Oid"
                                                            >
                                        </DxComboBoxSettings>
                                    </EditSettings>
                                </DxGridDataColumn>
                            </Columns>
                        </DxGrid>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    DxGrid customerGrid;
    DxGrid orderGrid;
    private IQueryable<Customer> customers;
    private IQueryable<Order> selectedCustomerOrders;

    private Customer SelectedCustomer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerAsync();
    }
    private async Task LoadCustomerAsync() {
        customers = await CustomerService.Get();
        customers = customers.OrderByDescending(item => item.Oid);
    }
    async Task LoadOrdersAsync(Customer item) {
        SelectedCustomer = item;

        selectedCustomerOrders = await OrderService.GetCustomerOrders(item.Oid);
        selectedCustomerOrders = selectedCustomerOrders.OrderByDescending(o => o.Oid);

        StateHasChanged();
    }
    void Grid_CustomizeEditModel_Customer(GridCustomizeEditModelEventArgs e) {
        var dataItem = (Customer)e.DataItem;
        var customer = CustomerService.CreateObject();
        e.EditModel = customer;
        if (dataItem != null) {
            customer.Oid = dataItem.Oid;
            customer.FirstName = dataItem.FirstName;
            customer.LastName = dataItem.LastName;
        }
    }
    void Grid_CustomizeEditModel_Order(GridCustomizeEditModelEventArgs e) {
        var dataItem = (Order)e.DataItem;
        var order = OrderService.CreateObject(SelectedCustomer.Session);
        e.EditModel = order;
        if (dataItem != null) {
            order.Oid = dataItem.Oid;
            order.OrderDate = dataItem.OrderDate;
            order.ProductName = dataItem.ProductName;
            order.Freight = dataItem.Freight;
            order.Customer = dataItem.Customer;
        }
        else {
            order.Customer =  SelectedCustomer;
        }
    }
    async void Grid_EditModelSaving_Customer(GridEditModelSavingEventArgs e) {
        Customer customer = null;
        customer = (Customer)e.EditModel;
        var customerChanges = GetCustomerChanges(customer);
        if (e.IsNew) {
            await CustomerService.Add(customerChanges);
        }
        else {
            await CustomerService.Update(customer.Oid, customerChanges);
        }
        await LoadCustomerAsync();
    }
    async void Grid_EditModelSaving_Order(GridEditModelSavingEventArgs e)
    {
        Order order = null;
        order = (Order)e.EditModel;
        var orderChanges = GetOrderChanges(order);
        if (e.IsNew){
            await OrderService.Add(orderChanges, SelectedCustomer.Oid);
        }
        else {
            await OrderService.Update(order.Oid, orderChanges);
        }
        await LoadOrdersAsync(SelectedCustomer);
    }

    async void Grid_DataItemDeleting_Customer(GridDataItemDeletingEventArgs e)
    {
        await CustomerService.Delete(((Customer)e.DataItem).Oid);
        await LoadCustomerAsync();
    }
    async void Grid_DataItemDeleting_Order(GridDataItemDeletingEventArgs e) {
        await OrderService.Delete(((Order)e.DataItem).Oid);
        await LoadOrdersAsync(SelectedCustomer);
    }

    private Dictionary<string, object> GetCustomerChanges(Customer obj) {
        var propertiesMapping = new Dictionary<string, object> {
            { nameof(Customer.FirstName), obj.FirstName },
            { nameof(Customer.LastName), obj.LastName },
        };
        return propertiesMapping;
    }
    private Dictionary<string, object> GetOrderChanges(Order obj) {
        var propertiesMapping = new Dictionary<string, object> {
            { nameof(Order.OrderDate), obj.OrderDate },
            { nameof(Order.ProductName), obj.ProductName },
            { nameof(Order.Freight), obj.Freight },
            { nameof(Order.CustomerId), obj.CustomerId }
        };
        return propertiesMapping;
    }
}
